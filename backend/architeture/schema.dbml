// ============================================
// Interactive Story Generator - Database Schema
// ============================================
// Copie este código e cole em: https://dbdiagram.io
// Para visualizar o diagrama ER completo
// ============================================

Project InteractiveStoryGenerator {
  database_type: 'SQLite'
  Note: '''
    # Interactive Story Generator Database
    Sistema de geração de histórias interativas com IA
    - Autenticação de usuários
    - Geração assíncrona de histórias
    - Narrativa com múltiplas escolhas
  '''
}

// ============================================
// USERS - Sistema de Autenticação
// ============================================
Table users {
  id integer [primary key, increment, note: 'Auto-incrementing primary key']
  email varchar(255) [unique, not null, note: 'User email address for authentication']
  hashed_password varchar(255) [not null, note: 'Bcrypt hashed password']
  created_at timestamp [default: `now()`, note: 'Account creation timestamp']
  
  Note: 'Stores user authentication information'
  
  Indexes {
    id [name: 'idx_users_id']
    email [name: 'idx_users_email', unique]
  }
}

// ============================================
// STORIES - Generated Stories
// ============================================
Table stories {
  id integer [primary key, increment, note: 'Auto-incrementing primary key']
  title varchar(500) [note: 'AI-generated story title']
  session_id varchar(100) [unique, note: 'Unique session identifier (UUID)']
  created_at timestamp [default: `now()`, note: 'Story creation timestamp']
  
  Note: '''
    Main stories table.
    Each story represents a complete branching narrative
    generated by the AI based on a user-provided theme.
  '''
  
  Indexes {
    id [name: 'idx_stories_id']
    title [name: 'idx_stories_title']
    session_id [name: 'idx_stories_session_id', unique]
  }
}

// ============================================
// STORY_NODES - Narrative Nodes
// ============================================
Table story_nodes {
  id integer [primary key, increment, note: 'Auto-incrementing primary key']
  story_id integer [ref: > stories.id, not null, note: 'Foreign key to parent story']
  content text [note: 'Narrative content of this node']
  is_root boolean [default: false, note: 'True if this is the starting node']
  is_ending boolean [default: false, note: 'True if this is an ending node']
  is_winning_ending boolean [default: false, note: 'True if this is a winning ending']
  options json [note: 'Array of available choices as JSON']
  
  Note: '''
    Story nodes form a tree/graph structure representing
    the branching narrative. Each node contains text and
    links to possible next nodes through the options field.
    
    Example options JSON:
    [
      {"text": "Go north", "next_node_id": 2},
      {"text": "Go south", "next_node_id": 3}
    ]
  '''
  
  Indexes {
    id [name: 'idx_story_nodes_id']
    story_id [name: 'idx_story_nodes_story_id']
  }
}

// ============================================
// STORY_JOBS - Async Job Tracking
// ============================================
Table story_jobs {
  id integer [primary key, increment, note: 'Auto-incrementing primary key']
  job_id varchar(100) [unique, not null, note: 'Unique job identifier (UUID)']
  session_id varchar(100) [note: 'Session identifier linking to story']
  theme varchar(500) [note: 'User-provided story theme/prompt']
  status varchar(50) [note: 'Job status: pending, completed, failed']
  story_id integer [ref: > stories.id, note: 'Foreign key to generated story (NULL until complete)']
  error text [note: 'Error message if job failed']
  created_at timestamp [default: `now()`, note: 'Job creation timestamp']
  completed_at timestamp [note: 'Job completion timestamp']
  
  Note: '''
    Tracks asynchronous story generation jobs.
    Status lifecycle: pending → completed/failed
    
    - pending: AI is generating the story
    - completed: Story generated successfully
    - failed: Error occurred (see error field)
  '''
  
  Indexes {
    id [name: 'idx_story_jobs_id']
    job_id [name: 'idx_story_jobs_job_id', unique]
    session_id [name: 'idx_story_jobs_session_id']
  }
}

// ============================================
// RELATIONSHIPS
// ============================================

// Story to Nodes (One-to-Many)
Ref: story_nodes.story_id > stories.id [
  delete: cascade,
  update: cascade
]

// Job to Story (One-to-One)
Ref: story_jobs.story_id > stories.id [
  delete: set null,
  update: cascade
]

// Future: User to Stories (One-to-Many)
// Uncomment when user_id is added to stories table
// Ref: stories.user_id > users.id [delete: cascade]

// ============================================
// TABLE GROUPS (for visual organization)
// ============================================
TableGroup Authentication {
  users
}

TableGroup CoreSystem {
  stories
  story_nodes
}

TableGroup AsyncProcessing {
  story_jobs
}

// ============================================
// ENUMS (for documentation)
// ============================================
Enum job_status {
  pending [note: 'Job created, waiting for processing']
  completed [note: 'Story generated successfully']
  failed [note: 'Error occurred during generation']
}

// ============================================
// NOTES & DOCUMENTATION
// ============================================
Note relationships {
  '''
  # Key Relationships
  
  1. **stories ← story_nodes** (1:N)
     - One story contains multiple nodes
     - Cascade delete: removing story removes all nodes
  
  2. **stories ← story_jobs** (1:1)
     - One job generates one story
     - Set NULL on delete: removing story keeps job record
  
  3. **users ← stories** (1:N) [FUTURE]
     - One user can create multiple stories
     - Will be implemented with authentication
  '''
}

Note data_flow {
  '''
  # Story Generation Flow
  
  1. User requests story with theme
  2. Create entry in story_jobs (status: pending)
  3. Background task generates story with AI
  4. Create entry in stories
  5. Create multiple story_nodes
  6. Update story_jobs (status: completed)
  7. Client polls job status and retrieves story
  '''
}
